module.exports=function(t){var e={};function o(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)o.d(r,n,function(e){return t[e]}.bind(null,n));return r},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=3)}([function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.StructureMap=class{constructor(t){this.sourcemap=[],t.find(FIND_SOURCES).forEach(t=>{this.sourcemap.push(new r(t))})}};class r{constructor(t){this.spaces=0,this.pos=t.pos;var e=this.pos.x-1,o=this.pos.x+1,r=this.pos.y-1,n=this.pos.y+1;for(let c=e;c<=o;c++)for(let e=r;e<=n;e++){var s=t.room.lookAt(c,e);"terrain"==s[0].type&&"wall"!=s[0].terrain&&(this.spaces+=1)}}}},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.RoomMem=class{constructor(t){this.pathsSet=!1,this.containersSet=!1,this.StructMap=t.StructMap}}},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=o(1),n=o(0);function s(t){var e=new r.RoomMem(t.memory);e.StructMap||(console.log("Setting up structure map for room: ",t.name),e.StructMap=new n.StructureMap(t),t.memory=e)}function c(t){var e=t.find(FIND_MY_SPAWNS)[0];if(t.memory.StructMap.sourcemap.forEach(o=>{t.findPath(o.pos,e.pos).forEach(e=>{t.createConstructionSite(e.x,e.y,STRUCTURE_ROAD)})}),t.controller){var o=t.controller;t.findPath(e.pos,o.pos).forEach(e=>{t.createConstructionSite(e.x,e.y,STRUCTURE_ROAD)})}}function u(t){console.log("Creatting containers...");var e=t.find(FIND_MY_SPAWNS)[0];console.log("Got Paths"),console.log(JSON.stringify(t.memory)),t.memory.StructMap&&(console.log("before the loop"),t.memory.StructMap.sourcemap.forEach(o=>{console.log("Da fuq",JSON.stringify(o)),console.log(JSON.stringify(e.pos));var r=t.findPath(o.pos,e.pos);console.log("da fuq again"),function(t,e){var o=t.x-1,r=t.x+1,n=t.y-1,s=t.y+1,c=e.lookAtArea(n,o,s,r,!1);console.log(JSON.stringify(c))}(r.splice(2,r.length-2)[0],t)}))}function i(t){return t.memory}e.Setup=function(){for(var t in Game.rooms){var e=Game.rooms[t];let o=i(e);o.pathsSet&&!o.containersSet&&(o=i(e),u(e),o.containersSet=!0,e.memory=o),o.pathsSet||(s(e),c(e),(o=i(e)).pathsSet=!0,e.memory=o)}}},function(t,e,o){"use strict";var r=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var o in t)Object.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const n=r(o(2));e.loop=function(){n.Setup()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jvb21NYW5hZ2VyL1Jvb21NYW5hZ2VyTW9kZWxzLnRzIiwid2VicGFjazovLy8uL3NyYy9HbG9iYWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jvb21NYW5hZ2VyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiU3RydWN0dXJlTWFwIiwiW29iamVjdCBPYmplY3RdIiwicm9vbSIsInRoaXMiLCJzb3VyY2VtYXAiLCJmaW5kIiwiRklORF9TT1VSQ0VTIiwiZm9yRWFjaCIsInNvdXJjZSIsInB1c2giLCJTb3VyY2VJbmZvIiwic3BhY2VzIiwicG9zIiwibGVmdCIsIngiLCJyaWdodCIsInRvcCIsInkiLCJib3QiLCJzcG90IiwibG9va0F0IiwidHlwZSIsInRlcnJhaW4iLCJSb29tTWVtIiwiZGF0YSIsInBhdGhzU2V0IiwiY29udGFpbmVyc1NldCIsIlN0cnVjdE1hcCIsIkdsb2JhbF8xIiwiUm9vbU1hbmFnZXJNb2RlbHNfMSIsIkNyZWF0ZVN0cnVjdHVyZU1hcCIsInJvb21NZW0iLCJtZW1vcnkiLCJjb25zb2xlIiwibG9nIiwiQ3JlYXRlU3RhcnRpbmdQYXRocyIsInNwYXduIiwiRklORF9NWV9TUEFXTlMiLCJmaW5kUGF0aCIsInBvc2l0aW9uIiwiY3JlYXRlQ29uc3RydWN0aW9uU2l0ZSIsIlNUUlVDVFVSRV9ST0FEIiwiY29udHJvbGxlciIsImN0ciIsIkNyZWF0ZVBhdGhDb250YWluZXJzIiwiSlNPTiIsInN0cmluZ2lmeSIsInBhdGgiLCJhcmVhIiwibG9va0F0QXJlYSIsIkNoZWNrU3Vycm91bmRpbmdzIiwic3BsaWNlIiwibGVuZ3RoIiwiR2V0Um9vbU1lbSIsIlNldHVwIiwiR2FtZSIsInJvb21zIiwiUk0iLCJfX2ltcG9ydFN0YXIiLCJsb29wIl0sIm1hcHBpbmdzIjoiMkJBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQTBEQSxPQXJEQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsYUFBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFB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Y2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG4iLCJcclxuZXhwb3J0IGNsYXNzIFN0cnVjdHVyZU1hcHtcclxuICAgIHNvdXJjZW1hcDpTb3VyY2VJbmZvW10gPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZXMgYSBtYXAgb2YgdGhlIG5hdHVyZWFsIHN0cnVjdHVyZXMgaW4gdGhlIHJvb20gb24gc3RhcnR1cFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihyb29tOiBSb29tKSB7XHJcbiAgICAgICAgdmFyIHNvdXJjZXMgPSByb29tLmZpbmQoRklORF9TT1VSQ0VTKTtcclxuICAgICAgICBzb3VyY2VzLmZvckVhY2goc291cmNlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VtYXAucHVzaChuZXcgU291cmNlSW5mbyhzb3VyY2UpKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBTb3VyY2VJbmZve1xyXG4gICAgcG9zOlJvb21Qb3NpdGlvbjtcclxuICAgIHNwYWNlczogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHF1aWNrIGFjY2VzcyBvYmplY3QgZm9yIHNvdXJjZXNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBTb3VyY2UpIHtcclxuICAgICAgICB0aGlzLnBvcyA9IHNvdXJjZS5wb3M7XHJcbiAgICAgICAgdmFyIGxlZnQgPSB0aGlzLnBvcy54IC0xO1xyXG4gICAgICAgIHZhciByaWdodCA9IHRoaXMucG9zLnggKyAxO1xyXG4gICAgICAgIHZhciB0b3AgPSB0aGlzLnBvcy55IC0gMTtcclxuICAgICAgICB2YXIgYm90ID0gdGhpcy5wb3MueSArIDE7XHJcbiAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHBvc2l0aW9ucyBhcm91bmQgc291cmNlIGFuZCBjaGVjayBmb3IgZW1wdHkgc3BhY2VzXHJcbiAgICAgICAgZm9yIChsZXQgeCA9IGxlZnQ7IHggPD0gcmlnaHQ7IHgrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gdG9wOyB5IDw9IGJvdDsgeSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3BvdCA9IHNvdXJjZS5yb29tLmxvb2tBdCh4LHkpO1xyXG4gICAgICAgICAgICAgICAgaWYoc3BvdFswXS50eXBlID09IFwidGVycmFpblwiICYmIHNwb3RbMF0udGVycmFpbiAhPSBcIndhbGxcIil7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGFjZXMgKz0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuIiwiaW1wb3J0IHsgU3RydWN0dXJlTWFwIH0gZnJvbSBcIi4vUm9vbU1hbmFnZXIvUm9vbU1hbmFnZXJNb2RlbHNcIjtcclxuXHJcblxyXG5leHBvcnQgbW9kdWxlIEdsb2JhbHtcclxuICAgIFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUm9vbU1lbXtcclxuICAgIHBhdGhzU2V0OmJvb2xlYW4gPWZhbHNlO1xyXG4gICAgY29udGFpbmVyc1NldDpib29sZWFuID0gZmFsc2U7XHJcbiAgICBTdHJ1Y3RNYXA6U3RydWN0dXJlTWFwO1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBSb29tTWVtb3J5KSB7XHJcbiAgICAgICAgdGhpcy5TdHJ1Y3RNYXAgPSBkYXRhLlN0cnVjdE1hcDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBHbG9iYWwsIFJvb21NZW0gfSBmcm9tICcuLi9HbG9iYWwnO1xyXG5pbXBvcnQgeyBTdHJ1Y3R1cmVNYXAgfSBmcm9tICcuL1Jvb21NYW5hZ2VyTW9kZWxzJztcclxuaW1wb3J0ICogYXMgXyBmcm9tIFwibG9kYXNoXCI7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFNldHVwKCl7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gR2FtZS5yb29tcykge1xyXG4gICAgICAgIHZhciByb29tID0gR2FtZS5yb29tc1trZXldO1xyXG4gICAgICAgIGxldCByb29tTWVtID0gR2V0Um9vbU1lbShyb29tKTtcclxuXHJcbiAgICAgICAgaWYocm9vbU1lbS5wYXRoc1NldCAmJiAhcm9vbU1lbS5jb250YWluZXJzU2V0KXtcclxuICAgICAgICAgICAgcm9vbU1lbSA9IEdldFJvb21NZW0ocm9vbSk7XHJcbiAgICAgICAgICAgIENyZWF0ZVBhdGhDb250YWluZXJzKHJvb20pO1xyXG4gICAgICAgICAgICByb29tTWVtLmNvbnRhaW5lcnNTZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICByb29tLm1lbW9yeSA9IHJvb21NZW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighcm9vbU1lbS5wYXRoc1NldCl7XHJcbiAgICAgICAgICAgIENyZWF0ZVN0cnVjdHVyZU1hcChyb29tKTtcclxuICAgICAgICAgICAgQ3JlYXRlU3RhcnRpbmdQYXRocyhyb29tKTtcclxuICAgICAgICAgICAgcm9vbU1lbSA9IEdldFJvb21NZW0ocm9vbSk7XHJcbiAgICAgICAgICAgIHJvb21NZW0ucGF0aHNTZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICByb29tLm1lbW9yeSA9IHJvb21NZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuXHJcbmZ1bmN0aW9uIENyZWF0ZVN0cnVjdHVyZU1hcChyb29tOiBSb29tKXtcclxuICAgIHZhciByb29tTWVtID0gIG5ldyBSb29tTWVtKHJvb20ubWVtb3J5KTtcclxuICAgIGlmKCFyb29tTWVtLlN0cnVjdE1hcCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTZXR0aW5nIHVwIHN0cnVjdHVyZSBtYXAgZm9yIHJvb206IFwiLCByb29tLm5hbWUpO1xyXG4gICAgICAgIHJvb21NZW0uU3RydWN0TWFwID0gbmV3IFN0cnVjdHVyZU1hcChyb29tKTtcclxuICAgICAgICByb29tLm1lbW9yeSA9IHJvb21NZW07XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIENyZWF0ZVN0YXJ0aW5nUGF0aHMocm9vbTogUm9vbSl7XHJcbiAgICB2YXIgc3Bhd24gPSByb29tLmZpbmQoRklORF9NWV9TUEFXTlMpWzBdO1xyXG4gICAgKHJvb20ubWVtb3J5IGFzIFJvb21NZW0pLlN0cnVjdE1hcC5zb3VyY2VtYXAuZm9yRWFjaChzb3VyY2UgPT4ge1xyXG4gICAgICAgIHZhciBvcHRzOiBGaW5kUGF0aE9wdHMgID0ge307XHJcbiAgICAgICAgdmFyIHBhdGggPSByb29tLmZpbmRQYXRoKHNvdXJjZS5wb3MgLHNwYXduLnBvcylcclxuICAgICAgICBwYXRoLmZvckVhY2gocG9zaXRpb24gPT4ge1xyXG4gICAgICAgICAgICByb29tLmNyZWF0ZUNvbnN0cnVjdGlvblNpdGUocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgU1RSVUNUVVJFX1JPQUQpO1xyXG4gICAgICAgIH0pOyAgICAgICAgXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZihyb29tLmNvbnRyb2xsZXIpe1xyXG4gICAgICAgIHZhciBjdHIgPSAocm9vbS5jb250cm9sbGVyIGFzIFN0cnVjdHVyZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgIHZhciBwYXRoID0gcm9vbS5maW5kUGF0aChzcGF3bi5wb3MsIGN0ci5wb3MgKVxyXG4gICAgICAgIHBhdGguZm9yRWFjaChwb3NpdGlvbiA9PiB7XHJcbiAgICAgICAgICAgIHJvb20uY3JlYXRlQ29uc3RydWN0aW9uU2l0ZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBTVFJVQ1RVUkVfUk9BRCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIENyZWF0ZVBhdGhDb250YWluZXJzKHJvb206IFJvb20pe1xyXG4gICAgY29uc29sZS5sb2coXCJDcmVhdHRpbmcgY29udGFpbmVycy4uLlwiKVxyXG4gICAgdmFyIHNwYXduID0gcm9vbS5maW5kKEZJTkRfTVlfU1BBV05TKVswXTtcclxuICAgIGNvbnNvbGUubG9nKFwiR290IFBhdGhzXCIpXHJcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSgocm9vbS5tZW1vcnkgYXMgUm9vbU1lbSkpKVxyXG4gICAgaWYoKHJvb20ubWVtb3J5IGFzIFJvb21NZW0pLlN0cnVjdE1hcCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJiZWZvcmUgdGhlIGxvb3BcIik7XHJcbiAgICAgICAgKHJvb20ubWVtb3J5IGFzIFJvb21NZW0pLlN0cnVjdE1hcC5zb3VyY2VtYXAuZm9yRWFjaChzb3VyY2UgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRhIGZ1cVwiLCBKU09OLnN0cmluZ2lmeShzb3VyY2UpKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoc3Bhd24ucG9zKSk7XHJcbiAgICAgICAgICAgIHZhciBwYXRoID0gcm9vbS5maW5kUGF0aChzb3VyY2UucG9zICxzcGF3bi5wb3MpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImRhIGZ1cSBhZ2FpblwiKVxyXG4gICAgICAgICAgICB2YXIgc3ViUGF0aCA9IHBhdGguc3BsaWNlKDIscGF0aC5sZW5ndGggLTIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgQ2hlY2tTdXJyb3VuZGluZ3Moc3ViUGF0aFswXSxyb29tKTtcclxuICAgICAgICAgICAgLy8gcGF0aC5mb3JFYWNoKHBvc2l0aW9uID0+IHtcclxuICAgICAgICAgICAgLy8gICAgIHZhciBzcG90ID0gQ2hlY2tTdXJyb3VuZGluZ3MocG9zaXRpb24scm9vbSk7XHJcbiAgICAgICAgICAgIC8vIH0pOyAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG5cclxuZnVuY3Rpb24gQ2hlY2tTdXJyb3VuZGluZ3MocG9zOiBQYXRoU3RlcCwgcm9vbTogUm9vbSl7XHJcbiAgICB2YXIgbGVmdCA9IHBvcy54IC0xO1xyXG4gICAgdmFyIHJpZ2h0ID0gcG9zLnggKyAxO1xyXG4gICAgdmFyIHRvcCA9IHBvcy55IC0gMTtcclxuICAgIHZhciBib3QgPSBwb3MueSArIDE7XHJcbiAgICBcclxuICAgIHZhciBsb2NhdGlvbiA9IG51bGw7XHJcbiAgICB2YXIgYXJlYSA9IHJvb20ubG9va0F0QXJlYSh0b3AsbGVmdCxib3QscmlnaHQsZmFsc2UpO1xyXG4gICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoYXJlYSkpXHJcbiAgICByZXR1cm4gbG9jYXRpb247XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEdldFJvb21NZW0ocm9vbTogUm9vbSl7XHJcbiAgIHJldHVybiAocm9vbS5tZW1vcnkgYXMgUm9vbU1lbSk7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUk0gZnJvbSBcIi4vUm9vbU1hbmFnZXIvaW5kZXhcIlxyXG5cclxuZXhwb3J0IGNvbnN0IGxvb3AgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBSTS5TZXR1cCgpO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==