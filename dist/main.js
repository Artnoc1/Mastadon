module.exports=function(t){var e={};function r(o){if(e[o])return e[o].exports;var n=e[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=t,r.c=e,r.d=function(t,e,o){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(o,n,function(e){return t[e]}.bind(null,n));return o},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=3)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.StructureMap=class{constructor(t){this.sourcemap=[],t.find(FIND_SOURCES).forEach(t=>{this.sourcemap.push(new o(t))})}};class o{constructor(t){this.spaces=0,this.pos=t.pos;var e=this.pos.x-1,r=this.pos.x+1,o=this.pos.y-1,n=this.pos.y+1;for(let a=e;a<=r;a++)for(let e=o;e<=n;e++){var s=t.room.lookAt(a,e);"terrain"==s[0].type&&"wall"!=s[0].terrain&&(this.spaces+=1)}}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.RoomMem=class{constructor(t){this.pathsSet=!1,this.containersSet=!1,this.StructMap=t.StructMap,this.pathSets=[]}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const o=r(1),n=r(0);function s(t){var e=new o.RoomMem(t.memory);e.StructMap||(console.log("Setting up structure map for room: ",t.name),e.StructMap=new n.StructureMap(t),t.memory=e)}function a(t){var e=t.find(FIND_MY_SPAWNS)[0],r=t.memory;if(r.StructMap.sourcemap.forEach(o=>{var n=t.findPath(o.pos,e.pos);r.pathSets.push(n),n.forEach(e=>{t.createConstructionSite(e.x,e.y,STRUCTURE_ROAD)})}),t.controller){var o=t.controller,n=t.findPath(e.pos,o.pos);r.pathSets.push(n),n.forEach(e=>{t.createConstructionSite(e.x,e.y,STRUCTURE_ROAD)})}t.memory=r}function i(t){console.log("Creatting containers...");t.find(FIND_MY_SPAWNS)[0];console.log("Got Paths"),console.log(JSON.stringify(t.memory)),t.memory.pathSets&&t.memory.pathSets.forEach(e=>{console.log("path: ",e);var r=e.splice(1,e.length-2);for(let e=0;e<r.length;e++){var o=u(r[e],t);if(o){t.createConstructionSite(o.x,o.y,STRUCTURE_CONTAINER);break}}})}function u(t,e){var r=t.x-1,o=t.x+1,n=t.y-1,s=t.y+1,a=null,i=e.lookAtArea(n,r,s,o,!1);for(var u in console.log("Area: ",JSON.stringify(i)),i){var c=i[u];for(var l in c)if(1==i[u][l].length&&"wall"!=i[u][l][0].terrain){a={x:parseInt(l),y:parseInt(u)},console.log("Selected spot: ",JSON.stringify(a));break}break}return a}function c(t){return t.memory}e.Setup=function(){for(var t in Game.rooms){var e=Game.rooms[t];let r=c(e);r.pathsSet&&!r.containersSet&&(r=c(e),i(e),r.containersSet=!0,e.memory=r),r.pathsSet||(s(e),a(e),(r=c(e)).pathsSet=!0,e.memory=r)}}},function(t,e,r){"use strict";var o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e};Object.defineProperty(e,"__esModule",{value:!0});const n=o(r(2));e.loop=function(){n.Setup()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,